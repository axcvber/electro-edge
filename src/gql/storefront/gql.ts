/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment Address on MailingAddress {\n    id\n    formatted\n    firstName\n    lastName\n    name\n    company\n    address1\n    address2\n    country\n    province\n    provinceCode\n    city\n    zip\n    phone\n  }\n": types.AddressFragmentDoc,
    "\n  fragment MenuItem on MenuItem {\n    id\n    title\n    type\n    url\n  }\n": types.MenuItemFragmentDoc,
    "\n  fragment ShopPolicy on ShopPolicy {\n    id\n    handle\n    title\n    body\n  }\n": types.ShopPolicyFragmentDoc,
    "\n  fragment ProductCard on Product {\n    id\n    handle\n    title\n    isGiftCard\n    variants(first: 50) {\n      nodes {\n        id\n        title\n        sku\n        availableForSale\n        image {\n          url\n          altText\n        }\n        price {\n          amount\n          currencyCode\n        }\n        compareAtPrice {\n          amount\n          currencyCode\n        }\n        selectedOptions {\n          name\n          value\n        }\n        quantityAvailable\n        colorHex: metafield(namespace: \"custom\", key: \"color\") {\n          id\n          value\n          key\n          description\n          type\n        }\n        previewInfo: metafield(namespace: \"custom\", key: \"preview_info\") {\n          references(first: 5) {\n            nodes {\n              __typename\n              ... on Metaobject {\n                fields {\n                  type\n                  key\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ProductCardFragmentDoc,
    "\n  fragment ProductVariantCard on ProductVariant {\n    product {\n      id\n      handle\n      title\n      options {\n        id\n        name\n        values\n      }\n      variants(first: 10) {\n        nodes {\n          title\n          id\n          sku\n          selectedOptions {\n            name\n            value\n          }\n          price {\n            amount\n            currencyCode\n          }\n          compareAtPrice {\n            amount\n            currencyCode\n          }\n          colorHex: metafield(namespace: \"custom\", key: \"color\") {\n            id\n            value\n            key\n            description\n            type\n          }\n          quantityAvailable\n          availableForSale\n          image {\n            url\n            altText\n          }\n        }\n      }\n    }\n    id\n    title\n    sku\n    availableForSale\n    image {\n      url\n      altText\n    }\n    price {\n      amount\n      currencyCode\n    }\n    compareAtPrice {\n      amount\n      currencyCode\n    }\n    selectedOptions {\n      name\n      value\n    }\n    quantityAvailable\n    colorHex: metafield(namespace: \"custom\", key: \"color\") {\n      id\n      value\n      key\n      description\n      type\n    }\n  }\n": types.ProductVariantCardFragmentDoc,
    "\n  mutation CustomerAddressCreate($address: MailingAddressInput!, $customerAccessToken: String!) {\n    customerAddressCreate(address: $address, customerAccessToken: $customerAccessToken) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAddress {\n        id\n      }\n    }\n  }\n": types.CustomerAddressCreateDocument,
    "\n  mutation CustomerAddressUpdate($address: MailingAddressInput!, $customerAccessToken: String!, $id: ID!) {\n    customerAddressUpdate(address: $address, customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAddress {\n        id\n      }\n    }\n  }\n": types.CustomerAddressUpdateDocument,
    "\n  mutation CustomerAddressDelete($customerAccessToken: String!, $id: ID!) {\n    customerAddressDelete(customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      deletedCustomerAddressId\n    }\n  }\n": types.CustomerAddressDeleteDocument,
    "\n  mutation CustomerDefaultAddressUpdate($addressId: ID!, $customerAccessToken: String!) {\n    customerDefaultAddressUpdate(addressId: $addressId, customerAccessToken: $customerAccessToken) {\n      customer {\n        defaultAddress {\n          id\n        }\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerDefaultAddressUpdateDocument,
    "\n  mutation cartCreate($cartInput: CartInput) {\n    cartCreate(input: $cartInput) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.CartCreateDocument,
    "\n  mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.AddToCartDocument,
    "\n  mutation updateCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.UpdateCartItemsDocument,
    "\n  mutation removeFromCart($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.RemoveFromCartDocument,
    "\n  mutation cartBuyerIdentityUpdate($buyerIdentity: CartBuyerIdentityInput!, $cartId: ID!) {\n    cartBuyerIdentityUpdate(buyerIdentity: $buyerIdentity, cartId: $cartId) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.CartBuyerIdentityUpdateDocument,
    "\n  mutation customerCreate($input: CustomerCreateInput!) {\n    customerCreate(input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerCreateDocument,
    "\n  mutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n": types.CustomerAccessTokenCreateDocument,
    "\n  mutation CustomerUpdate($customer: CustomerUpdateInput!, $customerAccessToken: String!) {\n    customerUpdate(customer: $customer, customerAccessToken: $customerAccessToken) {\n      customer {\n        id\n      }\n      customerAccessToken {\n        accessToken\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerUpdateDocument,
    "\n  mutation CustomerRecover($email: String!) {\n    customerRecover(email: $email) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerRecoverDocument,
    "\n  mutation CustomerReset($id: ID!, $input: CustomerResetInput!) {\n    customerReset(id: $id, input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerResetDocument,
    "\n  mutation CustomerActivate($id: ID!, $input: CustomerActivateInput!) {\n    customerActivate(id: $id, input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerActivateDocument,
    "\n  query GetCart($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      buyerIdentity {\n        email\n        phone\n        customer {\n          id\n        }\n        countryCode\n      }\n      lines(first: 250) {\n        nodes {\n          id\n          quantity\n          cost {\n            subtotalAmount {\n              amount\n              currencyCode\n            }\n          }\n          merchandise {\n            ... on ProductVariant {\n              id\n              title\n              price {\n                amount\n                currencyCode\n              }\n              image {\n                url\n                altText\n              }\n              product {\n                id\n                title\n                handle\n              }\n              quantityAvailable\n            }\n          }\n        }\n      }\n      cost {\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n      }\n      totalQuantity\n      checkoutUrl\n    }\n  }\n": types.GetCartDocument,
    "\n  query GetCollectionPage($handle: String!, $language: LanguageCode!) @inContext(language: $language) {\n    collection(handle: $handle) {\n      seo {\n        description\n        title\n      }\n      handle\n      title\n      description\n      metafield(namespace: \"custom\", key: \"background\") {\n        value\n        type\n        reference {\n          __typename\n          ... on MediaImage {\n            image {\n              url\n              altText\n            }\n          }\n        }\n      }\n      products(first: 1) {\n        filters {\n          id\n          label\n          type\n          values {\n            id\n            label\n            count\n            input\n          }\n        }\n      }\n    }\n  }\n": types.GetCollectionPageDocument,
    "\n  query GetCollectionProducts(\n    $handle: String!\n    $first: Int = 250\n    $after: String\n    $filters: [ProductFilter!]\n    $sortKey: ProductCollectionSortKeys\n    $reverse: Boolean\n    $language: LanguageCode!\n  ) @inContext(language: $language) {\n    collection(handle: $handle) {\n      products(first: $first, after: $after, filters: $filters, sortKey: $sortKey, reverse: $reverse) {\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        nodes {\n          ...ProductCard\n        }\n        filters {\n          id\n          label\n          type\n          values {\n            id\n            label\n            count\n            input\n          }\n        }\n      }\n    }\n  }\n": types.GetCollectionProductsDocument,
    "\n  query GetCustomer($customerAccessToken: String!) {\n    customer(customerAccessToken: $customerAccessToken) {\n      id\n      firstName\n      lastName\n      acceptsMarketing\n      email\n      phone\n      defaultAddress {\n        id\n      }\n      cartId: metafield(key: \"cart_id\", namespace: \"custom\") {\n        value\n      }\n      wishlistId: metafield(key: \"wishlist_id\", namespace: \"custom\") {\n        value\n      }\n    }\n  }\n": types.GetCustomerDocument,
    "\n  query GetCustomerAddresses($customerAccessToken: String!) {\n    customer(customerAccessToken: $customerAccessToken) {\n      defaultAddress {\n        ...Address\n      }\n      addresses(first: 50) {\n        nodes {\n          ...Address\n        }\n      }\n    }\n  }\n": types.GetCustomerAddressesDocument,
    "\n  query GetInitialData {\n    global: metaobject(handle: { handle: \"global\", type: \"global\" }) {\n      fields {\n        type\n        value\n        key\n        reference {\n          __typename\n          ... on MediaImage {\n            image {\n              url\n              altText\n            }\n          }\n        }\n        references(first: 10) {\n          nodes {\n            __typename\n            ... on MediaImage {\n              image {\n                url\n                altText\n              }\n            }\n          }\n        }\n      }\n    }\n    contacts: metaobject(handle: { handle: \"contacts\", type: \"contacts\" }) {\n      fields {\n        type\n        value\n        key\n        references(first: 10) {\n          __typename\n          ... on MetafieldReferenceConnection {\n            nodes {\n              __typename\n              ... on Metaobject {\n                type\n                handle\n                fields {\n                  key\n                  type\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetInitialDataDocument,
    "\n  query GetHeaderNavigation($language: LanguageCode!) @inContext(language: $language) {\n    mainMenu: menu(handle: \"main-menu\") {\n      id\n      handle\n      title\n      items {\n        ...MenuItem\n        items {\n          ...MenuItem\n        }\n      }\n    }\n    catalogMenu: menu(handle: \"catalog-menu\") {\n      id\n      handle\n      title\n      items {\n        id\n        title\n        type\n        url\n        resource {\n          __typename\n          ... on Collection {\n            handle\n            icon: metafield(namespace: \"custom\", key: \"icon\") {\n              reference {\n                __typename\n                ... on MediaImage {\n                  image {\n                    url\n                    altText\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetHeaderNavigationDocument,
    "\n  query GetFooterNavigation($language: LanguageCode!) @inContext(language: $language) {\n    footerMenu: menu(handle: \"footer\") {\n      id\n      handle\n      title\n      items {\n        ...MenuItem\n        items {\n          ...MenuItem\n        }\n      }\n    }\n  }\n": types.GetFooterNavigationDocument,
    "\n  query GetPage($slug: String!, $language: LanguageCode!) @inContext(language: $language) {\n    page(handle: $slug) {\n      handle\n      title\n      body\n      bodySummary\n      seo {\n        title\n        description\n      }\n      blocks: metafield(namespace: \"custom\", key: \"blocks\") {\n        references(first: 25) {\n          nodes {\n            __typename\n            ... on Metaobject {\n              handle\n              type\n              fields {\n                key\n                type\n                value\n                reference {\n                  __typename\n                  ... on Metaobject {\n                    type\n                    fields {\n                      __typename\n                      key\n                      type\n                      value\n                      reference {\n                        __typename\n                        ... on MediaImage {\n                          image {\n                            url\n                            altText\n                          }\n                        }\n                      }\n                    }\n                  }\n                  ... on MediaImage {\n                    image {\n                      url\n                      altText\n                    }\n                  }\n                }\n                references(first: 50) {\n                  nodes {\n                    __typename\n                    ... on Metaobject {\n                      id\n                      fields {\n                        value\n                        key\n                        type\n                        __typename\n                        reference {\n                          __typename\n                          ... on MediaImage {\n                            image {\n                              url\n                              altText\n                            }\n                          }\n                        }\n                      }\n                    }\n                    ... on Collection {\n                      title\n                      handle\n                      metafield(namespace: \"custom\", key: \"icon\") {\n                        reference {\n                          __typename\n                          ... on MediaImage {\n                            image {\n                              url\n                              altText\n                            }\n                          }\n                        }\n                      }\n                    }\n                    ...ProductVariantCard\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetPageDocument,
    "\n  query GetPrivacyPolicy($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      privacyPolicy {\n        ...ShopPolicy\n      }\n    }\n  }\n": types.GetPrivacyPolicyDocument,
    "\n  query GetTermsOfService($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      termsOfService {\n        ...ShopPolicy\n      }\n    }\n  }\n": types.GetTermsOfServiceDocument,
    "\n  query GetRefundPolicy($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      refundPolicy {\n        ...ShopPolicy\n      }\n    }\n  }\n": types.GetRefundPolicyDocument,
    "\n  query GetShippingPolicy($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      shippingPolicy {\n        ...ShopPolicy\n      }\n    }\n  }\n": types.GetShippingPolicyDocument,
    "\n  query GetProductVariant($variantId: ID!, $language: LanguageCode!) @inContext(language: $language) {\n    node(id: $variantId) {\n      ... on ProductVariant {\n        id\n        title\n        sku\n        selectedOptions {\n          name\n          value\n        }\n        availableForSale\n        price {\n          amount\n          currencyCode\n        }\n        compareAtPrice {\n          amount\n          currencyCode\n        }\n        quantityAvailable\n        images: metafield(namespace: \"custom\", key: \"images\") {\n          references(first: 50) {\n            nodes {\n              __typename\n              ... on MediaImage {\n                image {\n                  id\n                  url\n                  altText\n                }\n              }\n            }\n          }\n        }\n        previewInfo: metafield(namespace: \"custom\", key: \"preview_info\") {\n          references(first: 5) {\n            nodes {\n              __typename\n              ... on Metaobject {\n                fields {\n                  type\n                  key\n                  value\n                }\n              }\n            }\n          }\n        }\n        specification: metafield(namespace: \"custom\", key: \"specification\") {\n          references(first: 50) {\n            nodes {\n              __typename\n              ... on Metaobject {\n                fields {\n                  type\n                  key\n                  value\n                }\n              }\n            }\n          }\n        }\n        colorHex: metafield(namespace: \"custom\", key: \"color\") {\n          id\n          value\n          key\n          description\n          type\n        }\n        product {\n          id\n          handle\n          title\n          descriptionHtml\n          isGiftCard\n          options {\n            id\n            name\n            values\n          }\n\n          images(first: 50) {\n            nodes {\n              id\n              altText\n              url\n            }\n          }\n\n          variants(first: 50) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n              colorHex: metafield(namespace: \"custom\", key: \"color\") {\n                id\n                value\n                key\n                description\n                type\n              }\n              quantityAvailable\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProductVariantDocument,
    "\n  query GetProductRecommendations($productId: ID!, $language: LanguageCode!) @inContext(language: $language) {\n    productRecommendations(productId: $productId) {\n      ...ProductCard\n    }\n  }\n": types.GetProductRecommendationsDocument,
    "\n  query SearchProducts($query: String!, $first: Int, $language: LanguageCode!) @inContext(language: $language) {\n    search(query: $query, first: $first, types: PRODUCT) {\n      nodes {\n        ... on Product {\n          id\n          handle\n          title\n          featuredImage {\n            url\n            altText\n          }\n          variants(first: 1) {\n            nodes {\n              id\n            }\n          }\n        }\n      }\n      totalCount\n    }\n  }\n": types.SearchProductsDocument,
    "\n  query GetSeoMetadata($language: LanguageCode!) @inContext(language: $language) {\n    seo: metaobject(handle: { handle: \"seo\", type: \"seo\" }) {\n      fields {\n        type\n        value\n        key\n        reference {\n          __typename\n          ... on MediaImage {\n            image {\n              url\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSeoMetadataDocument,
    "\n  query GetWishlistValues($accessToken: String!) {\n    customer(customerAccessToken: $accessToken) {\n      wishlist: metafield(key: \"wishlist\", namespace: \"custom\") {\n        value\n      }\n    }\n  }\n": types.GetWishlistValuesDocument,
    "\n  query GetCustomerWishlist($accessToken: String!, $first: Int = 250, $after: String) {\n    customer(customerAccessToken: $accessToken) {\n      wishlist: metafield(key: \"wishlist\", namespace: \"custom\") {\n        id\n        references(first: $first, after: $after) {\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n          nodes {\n            ...ProductVariantCard\n          }\n        }\n      }\n    }\n  }\n": types.GetCustomerWishlistDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Address on MailingAddress {\n    id\n    formatted\n    firstName\n    lastName\n    name\n    company\n    address1\n    address2\n    country\n    province\n    provinceCode\n    city\n    zip\n    phone\n  }\n"): (typeof documents)["\n  fragment Address on MailingAddress {\n    id\n    formatted\n    firstName\n    lastName\n    name\n    company\n    address1\n    address2\n    country\n    province\n    provinceCode\n    city\n    zip\n    phone\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MenuItem on MenuItem {\n    id\n    title\n    type\n    url\n  }\n"): (typeof documents)["\n  fragment MenuItem on MenuItem {\n    id\n    title\n    type\n    url\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShopPolicy on ShopPolicy {\n    id\n    handle\n    title\n    body\n  }\n"): (typeof documents)["\n  fragment ShopPolicy on ShopPolicy {\n    id\n    handle\n    title\n    body\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductCard on Product {\n    id\n    handle\n    title\n    isGiftCard\n    variants(first: 50) {\n      nodes {\n        id\n        title\n        sku\n        availableForSale\n        image {\n          url\n          altText\n        }\n        price {\n          amount\n          currencyCode\n        }\n        compareAtPrice {\n          amount\n          currencyCode\n        }\n        selectedOptions {\n          name\n          value\n        }\n        quantityAvailable\n        colorHex: metafield(namespace: \"custom\", key: \"color\") {\n          id\n          value\n          key\n          description\n          type\n        }\n        previewInfo: metafield(namespace: \"custom\", key: \"preview_info\") {\n          references(first: 5) {\n            nodes {\n              __typename\n              ... on Metaobject {\n                fields {\n                  type\n                  key\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ProductCard on Product {\n    id\n    handle\n    title\n    isGiftCard\n    variants(first: 50) {\n      nodes {\n        id\n        title\n        sku\n        availableForSale\n        image {\n          url\n          altText\n        }\n        price {\n          amount\n          currencyCode\n        }\n        compareAtPrice {\n          amount\n          currencyCode\n        }\n        selectedOptions {\n          name\n          value\n        }\n        quantityAvailable\n        colorHex: metafield(namespace: \"custom\", key: \"color\") {\n          id\n          value\n          key\n          description\n          type\n        }\n        previewInfo: metafield(namespace: \"custom\", key: \"preview_info\") {\n          references(first: 5) {\n            nodes {\n              __typename\n              ... on Metaobject {\n                fields {\n                  type\n                  key\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductVariantCard on ProductVariant {\n    product {\n      id\n      handle\n      title\n      options {\n        id\n        name\n        values\n      }\n      variants(first: 10) {\n        nodes {\n          title\n          id\n          sku\n          selectedOptions {\n            name\n            value\n          }\n          price {\n            amount\n            currencyCode\n          }\n          compareAtPrice {\n            amount\n            currencyCode\n          }\n          colorHex: metafield(namespace: \"custom\", key: \"color\") {\n            id\n            value\n            key\n            description\n            type\n          }\n          quantityAvailable\n          availableForSale\n          image {\n            url\n            altText\n          }\n        }\n      }\n    }\n    id\n    title\n    sku\n    availableForSale\n    image {\n      url\n      altText\n    }\n    price {\n      amount\n      currencyCode\n    }\n    compareAtPrice {\n      amount\n      currencyCode\n    }\n    selectedOptions {\n      name\n      value\n    }\n    quantityAvailable\n    colorHex: metafield(namespace: \"custom\", key: \"color\") {\n      id\n      value\n      key\n      description\n      type\n    }\n  }\n"): (typeof documents)["\n  fragment ProductVariantCard on ProductVariant {\n    product {\n      id\n      handle\n      title\n      options {\n        id\n        name\n        values\n      }\n      variants(first: 10) {\n        nodes {\n          title\n          id\n          sku\n          selectedOptions {\n            name\n            value\n          }\n          price {\n            amount\n            currencyCode\n          }\n          compareAtPrice {\n            amount\n            currencyCode\n          }\n          colorHex: metafield(namespace: \"custom\", key: \"color\") {\n            id\n            value\n            key\n            description\n            type\n          }\n          quantityAvailable\n          availableForSale\n          image {\n            url\n            altText\n          }\n        }\n      }\n    }\n    id\n    title\n    sku\n    availableForSale\n    image {\n      url\n      altText\n    }\n    price {\n      amount\n      currencyCode\n    }\n    compareAtPrice {\n      amount\n      currencyCode\n    }\n    selectedOptions {\n      name\n      value\n    }\n    quantityAvailable\n    colorHex: metafield(namespace: \"custom\", key: \"color\") {\n      id\n      value\n      key\n      description\n      type\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerAddressCreate($address: MailingAddressInput!, $customerAccessToken: String!) {\n    customerAddressCreate(address: $address, customerAccessToken: $customerAccessToken) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAddress {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerAddressCreate($address: MailingAddressInput!, $customerAccessToken: String!) {\n    customerAddressCreate(address: $address, customerAccessToken: $customerAccessToken) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAddress {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerAddressUpdate($address: MailingAddressInput!, $customerAccessToken: String!, $id: ID!) {\n    customerAddressUpdate(address: $address, customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAddress {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerAddressUpdate($address: MailingAddressInput!, $customerAccessToken: String!, $id: ID!) {\n    customerAddressUpdate(address: $address, customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAddress {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerAddressDelete($customerAccessToken: String!, $id: ID!) {\n    customerAddressDelete(customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      deletedCustomerAddressId\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerAddressDelete($customerAccessToken: String!, $id: ID!) {\n    customerAddressDelete(customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      deletedCustomerAddressId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerDefaultAddressUpdate($addressId: ID!, $customerAccessToken: String!) {\n    customerDefaultAddressUpdate(addressId: $addressId, customerAccessToken: $customerAccessToken) {\n      customer {\n        defaultAddress {\n          id\n        }\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerDefaultAddressUpdate($addressId: ID!, $customerAccessToken: String!) {\n    customerDefaultAddressUpdate(addressId: $addressId, customerAccessToken: $customerAccessToken) {\n      customer {\n        defaultAddress {\n          id\n        }\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation cartCreate($cartInput: CartInput) {\n    cartCreate(input: $cartInput) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation cartCreate($cartInput: CartInput) {\n    cartCreate(input: $cartInput) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation removeFromCart($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation removeFromCart($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation cartBuyerIdentityUpdate($buyerIdentity: CartBuyerIdentityInput!, $cartId: ID!) {\n    cartBuyerIdentityUpdate(buyerIdentity: $buyerIdentity, cartId: $cartId) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation cartBuyerIdentityUpdate($buyerIdentity: CartBuyerIdentityInput!, $cartId: ID!) {\n    cartBuyerIdentityUpdate(buyerIdentity: $buyerIdentity, cartId: $cartId) {\n      cart {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation customerCreate($input: CustomerCreateInput!) {\n    customerCreate(input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation customerCreate($input: CustomerCreateInput!) {\n    customerCreate(input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerUpdate($customer: CustomerUpdateInput!, $customerAccessToken: String!) {\n    customerUpdate(customer: $customer, customerAccessToken: $customerAccessToken) {\n      customer {\n        id\n      }\n      customerAccessToken {\n        accessToken\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerUpdate($customer: CustomerUpdateInput!, $customerAccessToken: String!) {\n    customerUpdate(customer: $customer, customerAccessToken: $customerAccessToken) {\n      customer {\n        id\n      }\n      customerAccessToken {\n        accessToken\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerRecover($email: String!) {\n    customerRecover(email: $email) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerRecover($email: String!) {\n    customerRecover(email: $email) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerReset($id: ID!, $input: CustomerResetInput!) {\n    customerReset(id: $id, input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerReset($id: ID!, $input: CustomerResetInput!) {\n    customerReset(id: $id, input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerActivate($id: ID!, $input: CustomerActivateInput!) {\n    customerActivate(id: $id, input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerActivate($id: ID!, $input: CustomerActivateInput!) {\n    customerActivate(id: $id, input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCart($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      buyerIdentity {\n        email\n        phone\n        customer {\n          id\n        }\n        countryCode\n      }\n      lines(first: 250) {\n        nodes {\n          id\n          quantity\n          cost {\n            subtotalAmount {\n              amount\n              currencyCode\n            }\n          }\n          merchandise {\n            ... on ProductVariant {\n              id\n              title\n              price {\n                amount\n                currencyCode\n              }\n              image {\n                url\n                altText\n              }\n              product {\n                id\n                title\n                handle\n              }\n              quantityAvailable\n            }\n          }\n        }\n      }\n      cost {\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n      }\n      totalQuantity\n      checkoutUrl\n    }\n  }\n"): (typeof documents)["\n  query GetCart($cartId: ID!) {\n    cart(id: $cartId) {\n      id\n      buyerIdentity {\n        email\n        phone\n        customer {\n          id\n        }\n        countryCode\n      }\n      lines(first: 250) {\n        nodes {\n          id\n          quantity\n          cost {\n            subtotalAmount {\n              amount\n              currencyCode\n            }\n          }\n          merchandise {\n            ... on ProductVariant {\n              id\n              title\n              price {\n                amount\n                currencyCode\n              }\n              image {\n                url\n                altText\n              }\n              product {\n                id\n                title\n                handle\n              }\n              quantityAvailable\n            }\n          }\n        }\n      }\n      cost {\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n      }\n      totalQuantity\n      checkoutUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCollectionPage($handle: String!, $language: LanguageCode!) @inContext(language: $language) {\n    collection(handle: $handle) {\n      seo {\n        description\n        title\n      }\n      handle\n      title\n      description\n      metafield(namespace: \"custom\", key: \"background\") {\n        value\n        type\n        reference {\n          __typename\n          ... on MediaImage {\n            image {\n              url\n              altText\n            }\n          }\n        }\n      }\n      products(first: 1) {\n        filters {\n          id\n          label\n          type\n          values {\n            id\n            label\n            count\n            input\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCollectionPage($handle: String!, $language: LanguageCode!) @inContext(language: $language) {\n    collection(handle: $handle) {\n      seo {\n        description\n        title\n      }\n      handle\n      title\n      description\n      metafield(namespace: \"custom\", key: \"background\") {\n        value\n        type\n        reference {\n          __typename\n          ... on MediaImage {\n            image {\n              url\n              altText\n            }\n          }\n        }\n      }\n      products(first: 1) {\n        filters {\n          id\n          label\n          type\n          values {\n            id\n            label\n            count\n            input\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCollectionProducts(\n    $handle: String!\n    $first: Int = 250\n    $after: String\n    $filters: [ProductFilter!]\n    $sortKey: ProductCollectionSortKeys\n    $reverse: Boolean\n    $language: LanguageCode!\n  ) @inContext(language: $language) {\n    collection(handle: $handle) {\n      products(first: $first, after: $after, filters: $filters, sortKey: $sortKey, reverse: $reverse) {\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        nodes {\n          ...ProductCard\n        }\n        filters {\n          id\n          label\n          type\n          values {\n            id\n            label\n            count\n            input\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCollectionProducts(\n    $handle: String!\n    $first: Int = 250\n    $after: String\n    $filters: [ProductFilter!]\n    $sortKey: ProductCollectionSortKeys\n    $reverse: Boolean\n    $language: LanguageCode!\n  ) @inContext(language: $language) {\n    collection(handle: $handle) {\n      products(first: $first, after: $after, filters: $filters, sortKey: $sortKey, reverse: $reverse) {\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        nodes {\n          ...ProductCard\n        }\n        filters {\n          id\n          label\n          type\n          values {\n            id\n            label\n            count\n            input\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCustomer($customerAccessToken: String!) {\n    customer(customerAccessToken: $customerAccessToken) {\n      id\n      firstName\n      lastName\n      acceptsMarketing\n      email\n      phone\n      defaultAddress {\n        id\n      }\n      cartId: metafield(key: \"cart_id\", namespace: \"custom\") {\n        value\n      }\n      wishlistId: metafield(key: \"wishlist_id\", namespace: \"custom\") {\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCustomer($customerAccessToken: String!) {\n    customer(customerAccessToken: $customerAccessToken) {\n      id\n      firstName\n      lastName\n      acceptsMarketing\n      email\n      phone\n      defaultAddress {\n        id\n      }\n      cartId: metafield(key: \"cart_id\", namespace: \"custom\") {\n        value\n      }\n      wishlistId: metafield(key: \"wishlist_id\", namespace: \"custom\") {\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCustomerAddresses($customerAccessToken: String!) {\n    customer(customerAccessToken: $customerAccessToken) {\n      defaultAddress {\n        ...Address\n      }\n      addresses(first: 50) {\n        nodes {\n          ...Address\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCustomerAddresses($customerAccessToken: String!) {\n    customer(customerAccessToken: $customerAccessToken) {\n      defaultAddress {\n        ...Address\n      }\n      addresses(first: 50) {\n        nodes {\n          ...Address\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetInitialData {\n    global: metaobject(handle: { handle: \"global\", type: \"global\" }) {\n      fields {\n        type\n        value\n        key\n        reference {\n          __typename\n          ... on MediaImage {\n            image {\n              url\n              altText\n            }\n          }\n        }\n        references(first: 10) {\n          nodes {\n            __typename\n            ... on MediaImage {\n              image {\n                url\n                altText\n              }\n            }\n          }\n        }\n      }\n    }\n    contacts: metaobject(handle: { handle: \"contacts\", type: \"contacts\" }) {\n      fields {\n        type\n        value\n        key\n        references(first: 10) {\n          __typename\n          ... on MetafieldReferenceConnection {\n            nodes {\n              __typename\n              ... on Metaobject {\n                type\n                handle\n                fields {\n                  key\n                  type\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetInitialData {\n    global: metaobject(handle: { handle: \"global\", type: \"global\" }) {\n      fields {\n        type\n        value\n        key\n        reference {\n          __typename\n          ... on MediaImage {\n            image {\n              url\n              altText\n            }\n          }\n        }\n        references(first: 10) {\n          nodes {\n            __typename\n            ... on MediaImage {\n              image {\n                url\n                altText\n              }\n            }\n          }\n        }\n      }\n    }\n    contacts: metaobject(handle: { handle: \"contacts\", type: \"contacts\" }) {\n      fields {\n        type\n        value\n        key\n        references(first: 10) {\n          __typename\n          ... on MetafieldReferenceConnection {\n            nodes {\n              __typename\n              ... on Metaobject {\n                type\n                handle\n                fields {\n                  key\n                  type\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetHeaderNavigation($language: LanguageCode!) @inContext(language: $language) {\n    mainMenu: menu(handle: \"main-menu\") {\n      id\n      handle\n      title\n      items {\n        ...MenuItem\n        items {\n          ...MenuItem\n        }\n      }\n    }\n    catalogMenu: menu(handle: \"catalog-menu\") {\n      id\n      handle\n      title\n      items {\n        id\n        title\n        type\n        url\n        resource {\n          __typename\n          ... on Collection {\n            handle\n            icon: metafield(namespace: \"custom\", key: \"icon\") {\n              reference {\n                __typename\n                ... on MediaImage {\n                  image {\n                    url\n                    altText\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHeaderNavigation($language: LanguageCode!) @inContext(language: $language) {\n    mainMenu: menu(handle: \"main-menu\") {\n      id\n      handle\n      title\n      items {\n        ...MenuItem\n        items {\n          ...MenuItem\n        }\n      }\n    }\n    catalogMenu: menu(handle: \"catalog-menu\") {\n      id\n      handle\n      title\n      items {\n        id\n        title\n        type\n        url\n        resource {\n          __typename\n          ... on Collection {\n            handle\n            icon: metafield(namespace: \"custom\", key: \"icon\") {\n              reference {\n                __typename\n                ... on MediaImage {\n                  image {\n                    url\n                    altText\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFooterNavigation($language: LanguageCode!) @inContext(language: $language) {\n    footerMenu: menu(handle: \"footer\") {\n      id\n      handle\n      title\n      items {\n        ...MenuItem\n        items {\n          ...MenuItem\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFooterNavigation($language: LanguageCode!) @inContext(language: $language) {\n    footerMenu: menu(handle: \"footer\") {\n      id\n      handle\n      title\n      items {\n        ...MenuItem\n        items {\n          ...MenuItem\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPage($slug: String!, $language: LanguageCode!) @inContext(language: $language) {\n    page(handle: $slug) {\n      handle\n      title\n      body\n      bodySummary\n      seo {\n        title\n        description\n      }\n      blocks: metafield(namespace: \"custom\", key: \"blocks\") {\n        references(first: 25) {\n          nodes {\n            __typename\n            ... on Metaobject {\n              handle\n              type\n              fields {\n                key\n                type\n                value\n                reference {\n                  __typename\n                  ... on Metaobject {\n                    type\n                    fields {\n                      __typename\n                      key\n                      type\n                      value\n                      reference {\n                        __typename\n                        ... on MediaImage {\n                          image {\n                            url\n                            altText\n                          }\n                        }\n                      }\n                    }\n                  }\n                  ... on MediaImage {\n                    image {\n                      url\n                      altText\n                    }\n                  }\n                }\n                references(first: 50) {\n                  nodes {\n                    __typename\n                    ... on Metaobject {\n                      id\n                      fields {\n                        value\n                        key\n                        type\n                        __typename\n                        reference {\n                          __typename\n                          ... on MediaImage {\n                            image {\n                              url\n                              altText\n                            }\n                          }\n                        }\n                      }\n                    }\n                    ... on Collection {\n                      title\n                      handle\n                      metafield(namespace: \"custom\", key: \"icon\") {\n                        reference {\n                          __typename\n                          ... on MediaImage {\n                            image {\n                              url\n                              altText\n                            }\n                          }\n                        }\n                      }\n                    }\n                    ...ProductVariantCard\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPage($slug: String!, $language: LanguageCode!) @inContext(language: $language) {\n    page(handle: $slug) {\n      handle\n      title\n      body\n      bodySummary\n      seo {\n        title\n        description\n      }\n      blocks: metafield(namespace: \"custom\", key: \"blocks\") {\n        references(first: 25) {\n          nodes {\n            __typename\n            ... on Metaobject {\n              handle\n              type\n              fields {\n                key\n                type\n                value\n                reference {\n                  __typename\n                  ... on Metaobject {\n                    type\n                    fields {\n                      __typename\n                      key\n                      type\n                      value\n                      reference {\n                        __typename\n                        ... on MediaImage {\n                          image {\n                            url\n                            altText\n                          }\n                        }\n                      }\n                    }\n                  }\n                  ... on MediaImage {\n                    image {\n                      url\n                      altText\n                    }\n                  }\n                }\n                references(first: 50) {\n                  nodes {\n                    __typename\n                    ... on Metaobject {\n                      id\n                      fields {\n                        value\n                        key\n                        type\n                        __typename\n                        reference {\n                          __typename\n                          ... on MediaImage {\n                            image {\n                              url\n                              altText\n                            }\n                          }\n                        }\n                      }\n                    }\n                    ... on Collection {\n                      title\n                      handle\n                      metafield(namespace: \"custom\", key: \"icon\") {\n                        reference {\n                          __typename\n                          ... on MediaImage {\n                            image {\n                              url\n                              altText\n                            }\n                          }\n                        }\n                      }\n                    }\n                    ...ProductVariantCard\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPrivacyPolicy($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      privacyPolicy {\n        ...ShopPolicy\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPrivacyPolicy($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      privacyPolicy {\n        ...ShopPolicy\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetTermsOfService($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      termsOfService {\n        ...ShopPolicy\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTermsOfService($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      termsOfService {\n        ...ShopPolicy\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetRefundPolicy($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      refundPolicy {\n        ...ShopPolicy\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRefundPolicy($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      refundPolicy {\n        ...ShopPolicy\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetShippingPolicy($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      shippingPolicy {\n        ...ShopPolicy\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetShippingPolicy($language: LanguageCode!) @inContext(language: $language) {\n    shop {\n      shippingPolicy {\n        ...ShopPolicy\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductVariant($variantId: ID!, $language: LanguageCode!) @inContext(language: $language) {\n    node(id: $variantId) {\n      ... on ProductVariant {\n        id\n        title\n        sku\n        selectedOptions {\n          name\n          value\n        }\n        availableForSale\n        price {\n          amount\n          currencyCode\n        }\n        compareAtPrice {\n          amount\n          currencyCode\n        }\n        quantityAvailable\n        images: metafield(namespace: \"custom\", key: \"images\") {\n          references(first: 50) {\n            nodes {\n              __typename\n              ... on MediaImage {\n                image {\n                  id\n                  url\n                  altText\n                }\n              }\n            }\n          }\n        }\n        previewInfo: metafield(namespace: \"custom\", key: \"preview_info\") {\n          references(first: 5) {\n            nodes {\n              __typename\n              ... on Metaobject {\n                fields {\n                  type\n                  key\n                  value\n                }\n              }\n            }\n          }\n        }\n        specification: metafield(namespace: \"custom\", key: \"specification\") {\n          references(first: 50) {\n            nodes {\n              __typename\n              ... on Metaobject {\n                fields {\n                  type\n                  key\n                  value\n                }\n              }\n            }\n          }\n        }\n        colorHex: metafield(namespace: \"custom\", key: \"color\") {\n          id\n          value\n          key\n          description\n          type\n        }\n        product {\n          id\n          handle\n          title\n          descriptionHtml\n          isGiftCard\n          options {\n            id\n            name\n            values\n          }\n\n          images(first: 50) {\n            nodes {\n              id\n              altText\n              url\n            }\n          }\n\n          variants(first: 50) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n              colorHex: metafield(namespace: \"custom\", key: \"color\") {\n                id\n                value\n                key\n                description\n                type\n              }\n              quantityAvailable\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProductVariant($variantId: ID!, $language: LanguageCode!) @inContext(language: $language) {\n    node(id: $variantId) {\n      ... on ProductVariant {\n        id\n        title\n        sku\n        selectedOptions {\n          name\n          value\n        }\n        availableForSale\n        price {\n          amount\n          currencyCode\n        }\n        compareAtPrice {\n          amount\n          currencyCode\n        }\n        quantityAvailable\n        images: metafield(namespace: \"custom\", key: \"images\") {\n          references(first: 50) {\n            nodes {\n              __typename\n              ... on MediaImage {\n                image {\n                  id\n                  url\n                  altText\n                }\n              }\n            }\n          }\n        }\n        previewInfo: metafield(namespace: \"custom\", key: \"preview_info\") {\n          references(first: 5) {\n            nodes {\n              __typename\n              ... on Metaobject {\n                fields {\n                  type\n                  key\n                  value\n                }\n              }\n            }\n          }\n        }\n        specification: metafield(namespace: \"custom\", key: \"specification\") {\n          references(first: 50) {\n            nodes {\n              __typename\n              ... on Metaobject {\n                fields {\n                  type\n                  key\n                  value\n                }\n              }\n            }\n          }\n        }\n        colorHex: metafield(namespace: \"custom\", key: \"color\") {\n          id\n          value\n          key\n          description\n          type\n        }\n        product {\n          id\n          handle\n          title\n          descriptionHtml\n          isGiftCard\n          options {\n            id\n            name\n            values\n          }\n\n          images(first: 50) {\n            nodes {\n              id\n              altText\n              url\n            }\n          }\n\n          variants(first: 50) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n              colorHex: metafield(namespace: \"custom\", key: \"color\") {\n                id\n                value\n                key\n                description\n                type\n              }\n              quantityAvailable\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProductRecommendations($productId: ID!, $language: LanguageCode!) @inContext(language: $language) {\n    productRecommendations(productId: $productId) {\n      ...ProductCard\n    }\n  }\n"): (typeof documents)["\n  query GetProductRecommendations($productId: ID!, $language: LanguageCode!) @inContext(language: $language) {\n    productRecommendations(productId: $productId) {\n      ...ProductCard\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchProducts($query: String!, $first: Int, $language: LanguageCode!) @inContext(language: $language) {\n    search(query: $query, first: $first, types: PRODUCT) {\n      nodes {\n        ... on Product {\n          id\n          handle\n          title\n          featuredImage {\n            url\n            altText\n          }\n          variants(first: 1) {\n            nodes {\n              id\n            }\n          }\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query SearchProducts($query: String!, $first: Int, $language: LanguageCode!) @inContext(language: $language) {\n    search(query: $query, first: $first, types: PRODUCT) {\n      nodes {\n        ... on Product {\n          id\n          handle\n          title\n          featuredImage {\n            url\n            altText\n          }\n          variants(first: 1) {\n            nodes {\n              id\n            }\n          }\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSeoMetadata($language: LanguageCode!) @inContext(language: $language) {\n    seo: metaobject(handle: { handle: \"seo\", type: \"seo\" }) {\n      fields {\n        type\n        value\n        key\n        reference {\n          __typename\n          ... on MediaImage {\n            image {\n              url\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSeoMetadata($language: LanguageCode!) @inContext(language: $language) {\n    seo: metaobject(handle: { handle: \"seo\", type: \"seo\" }) {\n      fields {\n        type\n        value\n        key\n        reference {\n          __typename\n          ... on MediaImage {\n            image {\n              url\n              altText\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetWishlistValues($accessToken: String!) {\n    customer(customerAccessToken: $accessToken) {\n      wishlist: metafield(key: \"wishlist\", namespace: \"custom\") {\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetWishlistValues($accessToken: String!) {\n    customer(customerAccessToken: $accessToken) {\n      wishlist: metafield(key: \"wishlist\", namespace: \"custom\") {\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCustomerWishlist($accessToken: String!, $first: Int = 250, $after: String) {\n    customer(customerAccessToken: $accessToken) {\n      wishlist: metafield(key: \"wishlist\", namespace: \"custom\") {\n        id\n        references(first: $first, after: $after) {\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n          nodes {\n            ...ProductVariantCard\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCustomerWishlist($accessToken: String!, $first: Int = 250, $after: String) {\n    customer(customerAccessToken: $accessToken) {\n      wishlist: metafield(key: \"wishlist\", namespace: \"custom\") {\n        id\n        references(first: $first, after: $after) {\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n          nodes {\n            ...ProductVariantCard\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;